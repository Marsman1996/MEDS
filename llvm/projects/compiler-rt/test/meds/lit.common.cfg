# -*- Python -*-

# Common configuration for running meds

import os
import platform

import lit.formats

def get_required_attr(config, attr_name):
  attr_value = getattr(config, attr_name, None)
  if attr_value == None:
    lit_config.fatal(
      "No attribute %r in test configuration! You may need to run "
      "tests from your build directory or add this attribute "
      "to lit.site.cfg " % attr_name)
  return attr_value

# Setup libdl
if config.host_os != "FreeBSD":
  libdl_flag = "-ldl"
else:
  libdl_flag = ""

config.substitutions.append( ( "%libdl", libdl_flag) )
# Setup source root.
config.test_source_root = os.path.dirname(__file__)
 
config.name = "Meds" + config.name_suffix

if config.compiler_id == 'GNU':
  extra_link_flags = ["-pthread", "-lstdc++", libdl_flag]
else:
  extra_link_flags = []

clang_cflags = [get_required_attr(config, "target_cflags")] + extra_link_flags
clang_cxxflags = config.cxx_mode_flags + clang_cflags
meds_cflags = (["-fsanitize=meds",
               "-mno-omit-leaf-frame-pointer",
               "-fno-omit-frame-pointer",
               "-fno-optimize-sibling-calls"] +
               config.debug_info_flags + clang_cflags)

meds_stack_cflags = (["-fsanitize=meds",
                     "-mllvm -meds-stack=1 ",
                     "-mno-omit-leaf-frame-pointer",
                     "-fno-omit-frame-pointer",
                     "-fno-optimize-sibling-calls"] +
                     config.debug_info_flags + clang_cflags)

meds_global_cflags = (["-fsanitize=meds",
                       "-mllvm -meds-global=1 ",
                       "-mcmodel=large ",
                       "-Wl,--emit-relocs ",
                       "-mno-omit-leaf-frame-pointer",
                       "-fno-omit-frame-pointer",
                       "-fno-optimize-sibling-calls"] +
                       config.debug_info_flags + clang_cflags)


clang_meds_cflags = clang_cflags + meds_cflags
clang_meds_cxxflags = clang_cxxflags + meds_cflags

clang_meds_stack_cflags = clang_cflags + meds_stack_cflags
clang_meds_stack_cxxflags = clang_cxxflags + meds_stack_cflags

clang_meds_global_cflags = clang_cflags + meds_global_cflags
clang_meds_global_cxxflags = clang_cxxflags + meds_global_cflags

config.clang_cflags = clang_cflags
config.clang_cxxflags = clang_cxxflags

config.substitutions.append(('%env_asan_opts=',
                             'env ASAN_OPTIONS='))

def build_invocation(compile_flags):
  return " " + " ".join([config.clang] + compile_flags) + " "

config.substitutions.append( ("%clang ", build_invocation(clang_cflags)) )
config.substitutions.append( ("%clangxx ", build_invocation(clang_cxxflags)) )
config.substitutions.append( ("%clang_meds ", build_invocation(clang_meds_cflags)) )
config.substitutions.append( ("%clangxx_meds ", build_invocation(clang_meds_cxxflags)) )
config.substitutions.append( ("%clang_meds_stack ", build_invocation(clang_meds_stack_cflags)) )
config.substitutions.append( ("%clangxx_meds_stack ", build_invocation(clang_meds_stack_cxxflags)) )
config.substitutions.append( ("%clang_meds_global ", build_invocation(clang_meds_global_cflags)) )
config.substitutions.append( ("%clangxx_meds_global ", build_invocation(clang_meds_global_cxxflags)) )

# Some tests use C++11 features such as lambdas and need to pass -std=c++11.
config.substitutions.append(("%stdcxx11 ", "-std=c++11 "))

# Setup ld_flags
config.substitutions.append( ("%ld_flags_rpath_exe", "-Wl,-rpath,\$ORIGIN -L%T -l%xdynamiclib_namespec") )
config.substitutions.append( ("%ld_flags_rpath_so", '') )
# Setup dynamic lib
config.substitutions.append( ("%dynamiclib", '%T/lib%xdynamiclib_namespec.so') )
config.substitutions.append( ("%xdynamiclib_namespec", '$(basename %t).dynamic') )

# FIXME: De-hardcode this path.
asan_source_dir = os.path.join(
  get_required_attr(config, "compiler_rt_src_root"), "lib", "asan")
# Setup path to asan_symbolize.py script.
asan_symbolize = os.path.join(asan_source_dir, "scripts", "asan_symbolize.py")
if not os.path.exists(asan_symbolize):
  lit_config.fatal("Can't find script on path %r" % asan_symbolize)
python_exec = get_required_attr(config, "python_executable")
config.substitutions.append( ("%asan_symbolize", python_exec + " " + asan_symbolize + " ") )

# Determine kernel bitness
if config.host_arch.find('64') != -1:
  kernel_bits = '64'
else:
  kernel_bits = '32'

config.substitutions.append( ('CHECK-%kernel_bits', ("CHECK-kernel-" + kernel_bits + "-bits")))
config.available_features.add("asan-" + config.bits + "-bits")


# LD_LIBRARY_PATH

dynamic_library_lookup_var = 'LD_LIBRARY_PATH'
new_ld_library_path = os.path.pathsep.join(
  (config.compiler_rt_libdir,config.environment.get(dynamic_library_lookup_var, '')))
config.environment[dynamic_library_lookup_var] = new_ld_library_path

# Setup path to sancov.py script.
sanitizer_common_source_dir = os.path.join(
  get_required_attr(config, "compiler_rt_src_root"), "lib", "sanitizer_common")
sancov = os.path.join(sanitizer_common_source_dir, "scripts", "sancov.py")
if not os.path.exists(sancov):
  lit_config.fatal("Can't find script on path %r" % sancov)
python_exec = get_required_attr(config, "python_executable")
config.substitutions.append( ("%sancov ", python_exec + " " + sancov + " ") )


# Meds only supports Linux platform atm.
if config.host_os not in ['Linux']:
  config.unsupported = True


config.substitutions.append(('%fPIC', '-fPIC'))
config.substitutions.append(('%fPIE', '-fPIE'))
config.substitutions.append(('%pie', '-pie'))

config.suffixes = ['.c', '.cc', '.cpp']

